try{
    ;(function($, undefined){
        /**
         * 模板
         * */
        function tpl() {
            var arg = arguments;
            var that = this;
            for (var i = 0; i < arg.length; i++) {
                that = that.replace(new RegExp('\\{' + i + '\\}', "g"), arg[i]);
            }
            return that;
        };
        /**
         * 唯一性校验
         * */
        function unique(str){
            var obj={};
            var oldStrArr = str.split("");
            var newArr = [];
            for(var i=0;i<oldStrArr.length;i++){
                if(!obj[oldStrArr[i]]){
                    obj[oldStrArr[i]]=1;
                    newArr.push(oldStrArr[i]);
                }
            }
            return  newArr.join(",")
        }
        /**
         * 转换为浮点数
         * */
        function parseNum( value ){
            return parseFloat( $.trim( value+"" ), 10 ) || 0;
        }
        /**
         * 将字节数转字符个数
         * */
       function getByteLen( val ) {
            var temp = 0;
            for (var i = 0; i < val.length; i++ ) {
                //UTF-8 中文占2字节(统一做成单个字符)
                if ( val[ i ].match( /[^x00-xff]/ig ) != null ) {
                    temp += 1;
                }else{
                    temp += 1;
                }
            }
            return temp;
        }
        /**
         * 验证数据类型对应表
         * */
        var validRules =
            {
                email:
                        {
                            check:function(value) {
                                var value = $.trim(value);
                                    var invalidLetter;
                                    if(value.length>254){
                                        return "length-error"
                                    }else if(value.indexOf("@")==-1){
                                        return "at-error"
                                    }else if(!/^(\w|[!#$%&’*+-/=?^`{}|~.])+@[^@]+$/.test(value)){
                                        invalidLetter = value.replace(/@[^@]+$/,"").replace(/\w|[!#$%&’*+-/=?^`{}|~.]/g,"");
                                        return ["account-letter-forbidden",unique(invalidLetter)]
                                    }else if(/[.]{2}/.test(value)){
                                        return "double-dot-error"
                                    }else if(!/^.{1,63}@[^@]+$/.test(value)){
                                        return "account-length-error"
                                    }else if(! ( /(^[^.].*@[^@]+$)/.test(value) &&  /^.*[^.]@[^@]+$/.test(value) )){
                                        return "prevDot-error"
                                    }else if(! /^[^@]+@[A-Za-z0–9\-.]+$/.test(value)){
                                        invalidLetter = value.replace(/^[^@]+@/,"").replace(/[A-Za-z0–9\-.]/g,"");
                                        return ["nextLetter-forbidden",unique(invalidLetter)]
                                    }else if(! ( /^[^@]+@[^-].*$/.test(value)&&/^[^@]+@.*[^-]$/.test(value) )){
                                        return "nextLine-error"
                                    }else if( !/^[^@]+@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(value)){
                                        return "domain-error"
                                    }
                                    return false;
                                }
                        },
                submitRequired:{ check:function(value) {return ($.trim(value) == '');} },
                mobile:{ check:function(value) {return (!/^\d{5,}$/.test($.trim(value)));}},
                letter:{check:function(value) { value = $.trim(value);return (!getByteLen(value)==value.length)} },
                chinese:{check:function(value) {return (!/^[\u4e00-\u9fff]+$/.test($.trim(value)));} },
                date:{check:function(value){return(/Invalid|NaN/.test(new Date($.trim(value)).toString()));}},
                //请输入有效身份证
                idcard:{ check:function(value){return(!(/^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$/.test(value)||/^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{4}$/.test(value)));}},
                maxvalue:{check:function(value, $obj) {
                                //传递了比较值
                                var value2 = $obj.data("maxvalue");
                                if(value2){
                                    this.value = parseNum(value2);
                                }
                                value = parseNum(value);
                                return (!(value<=this.value));
                            }
                        },
                minvalue: {
                            check:function(value, $obj) {
                                //传递了比较值
                                var value2 = $obj.data("minvalue");
                                if(value2){
                                    this.value = parseNum(value2);
                                }
                                value = parseNum(value);
                                return (!(value>=this.value));
                            }
                        },
                multiple:{
                            check:function(value, $obj) {
                                //传递了比较值
                                var value2 = $obj.data("multiple");
                                if(value2){
                                    this.value = parseNum(value2);
                                }
                                value = parseNum(value);
                                return ((value%this.value));
                            }
                        },
				bigger :{
							check:function(value, $obj) {
								//传递了比较值
								var $bigger = $( $obj.data( "bigger" ) );
								var value2 = $bigger.val();
								//比较的值必须有输入
								if( (typeof value2 == "undefined") || (value2 == "") ){
									return ;
								}
								if(value2){
									this.value = parseFloat(value2, 10);
								}
								value = parseFloat(value, 10);

								return (!(value<this.value));
							}
						},
				smaller :{
							check:function(value, $obj) {
								//传递了比较
								var $bigger = $( $obj.data( "smaller" ) );
								var value2 = $bigger.val();
								//比较的值必须有输入
								if( (typeof value2 == "undefined") || (value2 == "") ){
									return ;
								}
								if(value2){
									this.value = parseFloat(value2, 10);
								}
								value = parseFloat(value, 10);
								return (!(value>this.value));
							}
						},
                maxlength:{
                            check:function(value, $obj) {
                                //传递了比较值
                                var value2 = $obj.data("maxlength");
                                if(value2){
                                    this.value = parseNum(value2);
                                }
                                //空格不计
                                value = $.trim(value);
                                return (!(getByteLen(value)<=this.value));
                            },
                            value:6,
                            defaultMsg:"i18n.valiForm.error.maxlength"
                        },
                minlength:
                        {
                            check:function(value, $obj) {
                                //传递了比较值
                                var value2 = $obj.data("minlength");
                                if(value2){
                                    this.value = parseNum(value2);
                                }
                                //空格不计
                                value = $.trim(value);
                                return (!(getByteLen(value)>=this.value));
                            },
                        },
                pswagain:
                        {
                            check:function(value, $obj) {
                                //传递了比较值pswAgain传递是一个jquery选择器字符
                                var sel = $obj.data("pswagain");
                                var value2 = $(sel).val();

                                return ( !( $.trim(value) == $.trim(value2) ) );
                            }
                        },
                password: {
                    check:function(value, $obj) {
                        if(/^\d+$/.test(value.trim())){
                            return true;
                        }else if(!/\d/.test(value.trim())){
                            return true;
                        }else{
                            return false
                        }
                    },
                }

        };

        /*跟据校验规则校验单条数据*/

        function checkByRule( $target,   error, success){

			var value;
			if( $target.data( "check-is-html" ) ){
				value = $.trim( $target.html().replace( /\n|\t/g, "" ) );
			}else if( $target.length && ( $target.attr( "type" ) == "checkbox" ) ){
				value = $target.prop( "checked" )?"1":"";
			}else if( $target.length && ($target.attr( "type" ) == "radio" ) ){
                var name = $target.attr( "name" );
                value = $("input[name='"+name+"']:checked").length;
			}else{
				value = $.trim( $target.val() );
			}

            var checkTypes = $target.attr( "check-type" );
			var checkTypeNames, checkTypeName, checkBoth;

            //共同校验分隔符'空格' '，' '&&'
            checkTypes = ( checkTypes && checkTypes.split( /\s+|,|&&/ ) ) ||[];

            for(var i=0; i<checkTypes.length; i++){
                //"或"规则的检测项
                checkTypeNames = checkTypes[ i ].split( "||" );
				checkBoth = false;
				if( checkTypeNames.length>1 ){
					checkBoth = true;
				}

				for(var j=0; j<checkTypeNames.length; j++){
					checkTypeName = checkTypeNames[j];
					//如果checktype没有或者checktype函数没有就跳出循环继续
					if( !validRules[ checkTypeName ] || !validRules[ checkTypeName ].check ){
						continue;
					}
					//让required 起作用,如果当required和其他一起使用时候，并且两个错误都同时发生，required优先
					if( checkTypeName != "required" ){
						if( value === "" || value === undefined ){
							continue;
						}
					}

					//将对象和值传递过去 true表示错误
                    var errorCode = validRules[ checkTypeName ].check( value, $target );
					var errorMsg;
                    if( errorCode ){

						//“或”规则失败继续校验,除了最后一次
						if( checkBoth && (j!=checkTypeNames.length-1)){
							continue;
						}

						if( $.type( error ) == "function"){

                            errorMsg =  $target.data( checkTypeName + "-msg" ) || validRules[ checkTypeName ].defaultMsg;
                            //校验带参数
                           if(typeof errorCode=="object"){
                               var errorParams = errorCode.slice(1);
                               errorCode = errorCode[0];
                               errorMsg = tpl.apply($target.data( checkTypeName+"-"+ errorCode + "-msg" ),errorParams);
                           }else if(typeof errorCode=="string"){
                               errorMsg = $target.data( checkTypeName+"-"+ errorCode + "-msg" )
                           }
                            error( $target, errorCode, checkTypeName );

						}

						//一旦发生错误就不会校验下一个类型
						return false;

						//校验成功之后的函数
					}else {
						//“或”规则只要成功就跳出
						if( checkBoth ){
							break;
						}
					}
				}//end for j

            }//end for i

			//全部成功之后单个校验完成
			if( $.type( success ) == "function" ){

				success( $target );

			}

            //全部类型都校验成功之后返回true
            return true;
        }
